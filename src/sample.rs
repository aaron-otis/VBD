use binary::binary::Binary;
use mongodb;
use regex::bytes::RegexSet;
use statistics;
use std::collections::HashMap;
use std::sync::mpsc;
use std::{fmt, str, thread};

pub enum SampleType {
    Benign,
    Cryptographic,
    Ransomware,
    Unknown
}

impl fmt::Display for SampleType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let s = match self {
            SampleType::Benign => "benign",
            SampleType::Cryptographic => "cryptographic",
            SampleType::Ransomware => "ransomware",
            SampleType::Unknown => "unknown"
        };
        write!(f, "{}", s)
    }
}

impl str::FromStr for SampleType {
    type Err = SampleType;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "benign" => Ok(SampleType::Benign),
            "cryptographic" => Ok(SampleType::Cryptographic),
            "ransomware" => Ok(SampleType::Ransomware),
            _ => Err(SampleType::Unknown)
        }
    }
}

pub struct Sample{
    pub binary: Binary,
    pub counts: HashMap<String, u64>,
    pub bitops: u64,
    pub loops: u64,
    pub strings: Vec<usize>,
    pub constants: Vec<usize>
}

impl Sample {
    /** Creates a instance of a Sample without any analysis preformed. Disassembles the
     * binary if it has not already been disassembled.
     */
    pub fn new(mut bin: Binary) -> Sample {
        if bin.blocks.len() == 0 {
            match bin.disassemble() {
                Ok(_) => (),
                Err(e) => panic!("Disassembly failed! {}", e)
            };
        }

        Sample {binary: bin,
                counts: HashMap::new(),
                bitops: 0,
                loops: 0,
                strings: Vec::new(),
                constants: Vec::new()}
    }

    pub fn analysis(&mut self) {
        let (loop_tx, loop_rx) = mpsc::channel();
        let mut bin = self.binary.clone();
        thread::spawn(move || {
            let loops = match bin.detect_loops() {
                Some(loops) => loops.len() as u64,
                None => 0 as u64
            };
            loop_tx.send(loops).unwrap();
        });

        let (count_tx, count_rx) = mpsc::channel();
        bin = self.binary.clone();
        thread::spawn(move || {
            count_tx.send(statistics::count_instructions(&bin)).unwrap();
        });

        let (bitop_tx, bitop_rx) = mpsc::channel();
        bin = self.binary.clone();
        thread::spawn(move || {
            bitop_tx.send(bin.instructions()
                             .iter()
                             .filter(|i| statistics::is_bitop(i))
                             .collect::<Vec<_>>()
                             .len() as u64).unwrap();
        });

        let (strings_tx, strings_rx) = mpsc::channel();
        bin = self.binary.clone();
        thread::spawn(move || {
            strings_tx.send(Sample::strings(&bin)).unwrap();
        });

        let (constants_tx, constants_rx) = mpsc::channel();
        bin = self.binary.clone();
        thread::spawn(move || {
            constants_tx.send(Sample::constants(&bin)).unwrap();
        });

        self.counts = match count_rx.recv() {
            Ok(counts) => counts,
            Err(e) => panic!("Receiving counts failed! {}", e)
        };

        self.bitops = match bitop_rx.recv() {
            Ok(bitops) => bitops,
            Err(e) => panic!("Receiving bitops failed! {}", e)
        };

        self.strings = match strings_rx.recv() {
            Ok(strings) => strings,
            Err(e) => panic!("Receiving strings failed! {}", e)
        };

        self.constants = match constants_rx.recv() {
            Ok(constants) => constants,
            Err(e) => panic!("Receiving constants failed! {}", e)
        };

        self.loops = match loop_rx.recv() {
            Ok(loops) => loops,
            Err(e) => panic!("Receiving loops failed! {}", e)
        };

    }

    pub fn strings(bin: &Binary) -> Vec<usize> {
        lazy_static! {
            static ref KW_SET: RegexSet = match RegexSet::new(&KEYWORDS) {
                Ok(set) => set,
                Err(e) => panic!("Error creating keyword regex set: {}", e)
            };
        }
        KW_SET.matches(bin.bytes.as_slice()).into_iter().collect()
    }

    pub fn constants(bin: &Binary) -> Vec<usize> {
        lazy_static! {
            static ref CONST_SET: RegexSet = match RegexSet::new(&CONSTANTS) {
                Ok(set) => set,
                Err(e) => panic!("Error creating keyword regex set: {}", e)
            };
        }
        CONST_SET.matches(bin.bytes.as_slice()).into_iter().collect()
    }

    pub fn counts_as_bson(&self) -> Result<mongodb::Bson, mongodb::EncoderError> {
        let counts: HashMap<String, i64> = self.counts.iter()
                                                      .map(|(k, &v)| (k.clone(),
                                                                      v as i64))
                                                      .collect();
        mongodb::to_bson(&counts)
    }
}

#[derive(Clone)]
pub enum Constants {
}

static KEYWORDS: [&'static str; 23] = ["aes",
                                       "rsa",
                                       "des",
                                       "chacha",
                                       "ransom",
                                       "crypt",
                                       "Crypt",
                                       "AES",
                                       "RSA",
                                       "DES",
                                       "CRYPT",
                                       "your",
                                       "Your",
                                       "YOUR",
                                       "files",
                                       "FILES",
                                       "key",
                                       "txt",
                                       "TXT",
                                       "HELP",
                                       ".onion",
                                       "payment",
                                       "bitcoin"];
static CONSTANTS: [&'static str; 8] = [r"(?-u)\x63\x7c\x77\x7b\xf2\x6b\x6f\xc5\x30\x01\x67\x2b\xfe\xd7\xab\x76\xca\x82\xc9\x7d\xfa\x59\x47\xf0\xad\xd4\xa2\xaf\x9c\xa4\x72\xc0\xb7\xfd\x93\x26\x36\x3f\xf7\xcc\x34\xa5\xe5\xf1\x71\xd8\x31\x15\x04\xc7\x23\xc3\x18\x96\x05\x9a\x07\x12\x80\xe2\xeb\x27\xb2\x75\x09\x83\x2c\x1a\x1b\x6e\x5a\xa0\x52\x3b\xd6\xb3\x29\xe3\x2f\x84\x53\xd1\x00\xed\x20\xfc\xb1\x5b\x6a\xcb\xbe\x39\x4a\x4c\x58\xcf\xd0\xef\xaa\xfb\x43\x4d\x33\x85\x45\xf9\x02\x7f\x50\x3c\x9f\xa8\x51\xa3\x40\x8f\x92\x9d\x38\xf5\xbc\xb6\xda\x21\x10\xff\xf3\xd2\xcd\x0c\x13\xec\x5f\x97\x44\x17\xc4\xa7\x7e\x3d\x64\x5d\x19\x73\x60\x81\x4f\xdc\x22\x2a\x90\x88\x46\xee\xb8\x14\xde\x5e\x0b\xdb\xe0\x32\x3a\x0a\x49\x06\x24\x5c\xc2\xd3\xac\x62\x91\x95\xe4\x79\xe7\xc8\x37\x6d\x8d\xd5\x4e\xa9\x6c\x56\xf4\xea\x65\x7a\xae\x08\xba\x78\x25\x2e\x1c\xa6\xb4\xc6\xe8\xdd\x74\x1f\x4b\xbd\x8b\x8a\x70\x3e\xb5\x66\x48\x03\xf6\x0e\x61\x35\x57\xb9\x86\xc1\x1d\x9e\xe1\xf8\x98\x11\x69\xd9\x8e\x94\x9b\x1e\x87\xe9\xce\x55\x28\xdf\x8c\xa1\x89\x0d\xbf\xe6\x42\x68\x41\x99\x2d\x0f\xb0\x54\xbb\x16", // AES FIPS-197 s-box
                                      r"(?-u)\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb", // AES RCON https://github.com/johanstenberg92/AES/blob/master/src/org/johanstenberg/aes/Constants.java
                                      r"(?-u)\xc6\x63\x63\xa5\xc6\x63\x63\xa5\xf8\x7c\x7c\x84\xf8\x7c\x7c\x84\xee\x77\x77\x99\xee\x77\x77\x99\xf6\x7b\x7b\x8d\xf6\x7b\x7b\x8d\xff\xf2\xf2\x0d\xff\xf2\xf2\x0d\xd6\x6b\x6b\xbd\xd6\x6b\x6b\xbd\xde\x6f\x6f\xb1\xde\x6f\x6f\xb1\x91\xc5\xc5\x54\x91\xc5\xc5\x54\x60\x30\x30\x50\x60\x30\x30\x50\x02\x01\x01\x03\x02\x01\x01\x03\xce\x67\x67\xa9\xce\x67\x67\xa9\x56\x2b\x2b\x7d\x56\x2b\x2b\x7d\xe7\xfe\xfe\x19\xe7\xfe\xfe\x19\xb5\xd7\xd7\x62\xb5\xd7\xd7\x62\x4d\xab\xab\xe6\x4d\xab\xab\xe6\xec\x76\x76\x9a\xec\x76\x76\x9a\x8f\xca\xca\x45\x8f\xca\xca\x45\x1f\x82\x82\x9d\x1f\x82\x82\x9d\x89\xc9\xc9\x40\x89\xc9\xc9\x40\xfa\x7d\x7d\x87\xfa\x7d\x7d\x87\xef\xfa\xfa\x15\xef\xfa\xfa\x15\xb2\x59\x59\xeb\xb2\x59\x59\xeb\x8e\x47\x47\xc9\x8e\x47\x47\xc9\xfb\xf0\xf0\x0b\xfb\xf0\xf0\x0b\x41\xad\xad\xec\x41\xad\xad\xec\xb3\xd4\xd4\x67\xb3\xd4\xd4\x67\x5f\xa2\xa2\xfd\x5f\xa2\xa2\xfd\x45\xaf\xaf\xea\x45\xaf\xaf\xea\x23\x9c\x9c\xbf\x23\x9c\x9c\xbf\x53\xa4\xa4\xf7\x53\xa4\xa4\xf7\xe4\x72\x72\x96\xe4\x72\x72\x96\x9b\xc0\xc0\x5b\x9b\xc0\xc0\x5b\x75\xb7\xb7\xc2\x75\xb7\xb7\xc2\xe1\xfd\xfd\x1c\xe1\xfd\xfd\x1c\x3d\x93\x93\xae\x3d\x93\x93\xae\x4c\x26\x26\x6a\x4c\x26\x26\x6a\x6c\x36\x36\x5a\x6c\x36\x36\x5a\x7e\x3f\x3f\x41\x7e\x3f\x3f\x41\xf5\xf7\xf7\x02\xf5\xf7\xf7\x02\x83\xcc\xcc\x4f\x83\xcc\xcc\x4f\x68\x34\x34\x5c\x68\x34\x34\x5c\x51\xa5\xa5\xf4\x51\xa5\xa5\xf4\xd1\xe5\xe5\x34\xd1\xe5\xe5\x34\xf9\xf1\xf1\x08\xf9\xf1\xf1\x08\xe2\x71\x71\x93\xe2\x71\x71\x93\xab\xd8\xd8\x73\xab\xd8\xd8\x73\x62\x31\x31\x53\x62\x31\x31\x53\x2a\x15\x15\x3f\x2a\x15\x15\x3f\x08\x04\x04\x0c\x08\x04\x04\x0c\x95\xc7\xc7\x52\x95\xc7\xc7\x52\x46\x23\x23\x65\x46\x23\x23\x65\x9d\xc3\xc3\x5e\x9d\xc3\xc3\x5e\x30\x18\x18\x28\x30\x18\x18\x28\x37\x96\x96\xa1\x37\x96\x96\xa1\x0a\x05\x05\x0f\x0a\x05\x05\x0f\x2f\x9a\x9a\xb5\x2f\x9a\x9a\xb5\x0e\x07\x07\x09\x0e\x07\x07\x09\x24\x12\x12\x36\x24\x12\x12\x36\x1b\x80\x80\x9b\x1b\x80\x80\x9b\xdf\xe2\xe2\x3d\xdf\xe2\xe2\x3d\xcd\xeb\xeb\x26\xcd\xeb\xeb\x26\x4e\x27\x27\x69\x4e\x27\x27\x69\x7f\xb2\xb2\xcd\x7f\xb2\xb2\xcd\xea\x75\x75\x9f\xea\x75\x75\x9f\x12\x09\x09\x1b\x12\x09\x09\x1b\x1d\x83\x83\x9e\x1d\x83\x83\x9e\x58\x2c\x2c\x74\x58\x2c\x2c\x74\x34\x1a\x1a\x2e\x34\x1a\x1a\x2e\x36\x1b\x1b\x2d\x36\x1b\x1b\x2d\xdc\x6e\x6e\xb2\xdc\x6e\x6e\xb2\xb4\x5a\x5a\xee\xb4\x5a\x5a\xee\x5b\xa0\xa0\xfb\x5b\xa0\xa0\xfb\xa4\x52\x52\xf6\xa4\x52\x52\xf6\x76\x3b\x3b\x4d\x76\x3b\x3b\x4d\xb7\xd6\xd6\x61\xb7\xd6\xd6\x61\x7d\xb3\xb3\xce\x7d\xb3\xb3\xce\x52\x29\x29\x7b\x52\x29\x29\x7b\xdd\xe3\xe3\x3e\xdd\xe3\xe3\x3e\x5e\x2f\x2f\x71\x5e\x2f\x2f\x71\x13\x84\x84\x97\x13\x84\x84\x97\xa6\x53\x53\xf5\xa6\x53\x53\xf5\xb9\xd1\xd1\x68\xb9\xd1\xd1\x68\x00\x00\x00\x00\x00\x00\x00\x00\xc1\xed\xed\x2c\xc1\xed\xed\x2c\x40\x20\x20\x60\x40\x20\x20\x60\xe3\xfc\xfc\x1f\xe3\xfc\xfc\x1f\x79\xb1\xb1\xc8\x79\xb1\xb1\xc8\xb6\x5b\x5b\xed\xb6\x5b\x5b\xed\xd4\x6a\x6a\xbe\xd4\x6a\x6a\xbe\x8d\xcb\xcb\x46\x8d\xcb\xcb\x46\x67\xbe\xbe\xd9\x67\xbe\xbe\xd9\x72\x39\x39\x4b\x72\x39\x39\x4b\x94\x4a\x4a\xde\x94\x4a\x4a\xde\x98\x4c\x4c\xd4\x98\x4c\x4c\xd4\xb0\x58\x58\xe8\xb0\x58\x58\xe8\x85\xcf\xcf\x4a\x85\xcf\xcf\x4a\xbb\xd0\xd0\x6b\xbb\xd0\xd0\x6b\xc5\xef\xef\x2a\xc5\xef\xef\x2a\x4f\xaa\xaa\xe5\x4f\xaa\xaa\xe5\xed\xfb\xfb\x16\xed\xfb\xfb\x16\x86\x43\x43\xc5\x86\x43\x43\xc5\x9a\x4d\x4d\xd7\x9a\x4d\x4d\xd7\x66\x33\x33\x55\x66\x33\x33\x55\x11\x85\x85\x94\x11\x85\x85\x94\x8a\x45\x45\xcf\x8a\x45\x45\xcf\xe9\xf9\xf9\x10\xe9\xf9\xf9\x10\x04\x02\x02\x06\x04\x02\x02\x06\xfe\x7f\x7f\x81\xfe\x7f\x7f\x81\xa0\x50\x50\xf0\xa0\x50\x50\xf0\x78\x3c\x3c\x44\x78\x3c\x3c\x44\x25\x9f\x9f\xba\x25\x9f\x9f\xba\x4b\xa8\xa8\xe3\x4b\xa8\xa8\xe3\xa2\x51\x51\xf3\xa2\x51\x51\xf3\x5d\xa3\xa3\xfe\x5d\xa3\xa3\xfe\x80\x40\x40\xc0\x80\x40\x40\xc0\x05\x8f\x8f\x8a\x05\x8f\x8f\x8a\x3f\x92\x92\xad\x3f\x92\x92\xad\x21\x9d\x9d\xbc\x21\x9d\x9d\xbc\x70\x38\x38\x48\x70\x38\x38\x48\xf1\xf5\xf5\x04\xf1\xf5\xf5\x04\x63\xbc\xbc\xdf\x63\xbc\xbc\xdf\x77\xb6\xb6\xc1\x77\xb6\xb6\xc1\xaf\xda\xda\x75\xaf\xda\xda\x75\x42\x21\x21\x63\x42\x21\x21\x63\x20\x10\x10\x30\x20\x10\x10\x30\xe5\xff\xff\x1a\xe5\xff\xff\x1a\xfd\xf3\xf3\x0e\xfd\xf3\xf3\x0e\xbf\xd2\xd2\x6d\xbf\xd2\xd2\x6d\x81\xcd\xcd\x4c\x81\xcd\xcd\x4c\x18\x0c\x0c\x14\x18\x0c\x0c\x14\x26\x13\x13\x35\x26\x13\x13\x35\xc3\xec\xec\x2f\xc3\xec\xec\x2f\xbe\x5f\x5f\xe1\xbe\x5f\x5f\xe1\x35\x97\x97\xa2\x35\x97\x97\xa2\x88\x44\x44\xcc\x88\x44\x44\xcc\x2e\x17\x17\x39\x2e\x17\x17\x39\x93\xc4\xc4\x57\x93\xc4\xc4\x57\x55\xa7\xa7\xf2\x55\xa7\xa7\xf2\xfc\x7e\x7e\x82\xfc\x7e\x7e\x82\x7a\x3d\x3d\x47\x7a\x3d\x3d\x47\xc8\x64\x64\xac\xc8\x64\x64\xac\xba\x5d\x5d\xe7\xba\x5d\x5d\xe7\x32\x19\x19\x2b\x32\x19\x19\x2b\xe6\x73\x73\x95\xe6\x73\x73\x95\xc0\x60\x60\xa0\xc0\x60\x60\xa0\x19\x81\x81\x98\x19\x81\x81\x98\x9e\x4f\x4f\xd1\x9e\x4f\x4f\xd1\xa3\xdc\xdc\x7f\xa3\xdc\xdc\x7f\x44\x22\x22\x66\x44\x22\x22\x66\x54\x2a\x2a\x7e\x54\x2a\x2a\x7e\x3b\x90\x90\xab\x3b\x90\x90\xab\x0b\x88\x88\x83\x0b\x88\x88\x83\x8c\x46\x46\xca\x8c\x46\x46\xca\xc7\xee\xee\x29\xc7\xee\xee\x29\x6b\xb8\xb8\xd3\x6b\xb8\xb8\xd3\x28\x14\x14\x3c\x28\x14\x14\x3c\xa7\xde\xde\x79\xa7\xde\xde\x79\xbc\x5e\x5e\xe2\xbc\x5e\x5e\xe2\x16\x0b\x0b\x1d\x16\x0b\x0b\x1d\xad\xdb\xdb\x76\xad\xdb\xdb\x76\xdb\xe0\xe0\x3b\xdb\xe0\xe0\x3b\x64\x32\x32\x56\x64\x32\x32\x56\x74\x3a\x3a\x4e\x74\x3a\x3a\x4e\x14\x0a\x0a\x1e\x14\x0a\x0a\x1e\x92\x49\x49\xdb\x92\x49\x49\xdb\x0c\x06\x06\x0a\x0c\x06\x06\x0a\x48\x24\x24\x6c\x48\x24\x24\x6c\xb8\x5c\x5c\xe4\xb8\x5c\x5c\xe4\x9f\xc2\xc2\x5d\x9f\xc2\xc2\x5d\xbd\xd3\xd3\x6e\xbd\xd3\xd3\x6e\x43\xac\xac\xef\x43\xac\xac\xef\xc4\x62\x62\xa6\xc4\x62\x62\xa6\x39\x91\x91\xa8\x39\x91\x91\xa8\x31\x95\x95\xa4\x31\x95\x95\xa4\xd3\xe4\xe4\x37\xd3\xe4\xe4\x37\xf2\x79\x79\x8b\xf2\x79\x79\x8b\xd5\xe7\xe7\x32\xd5\xe7\xe7\x32\x8b\xc8\xc8\x43\x8b\xc8\xc8\x43\x6e\x37\x37\x59\x6e\x37\x37\x59\xda\x6d\x6d\xb7\xda\x6d\x6d\xb7\x01\x8d\x8d\x8c\x01\x8d\x8d\x8c\xb1\xd5\xd5\x64\xb1\xd5\xd5\x64\x9c\x4e\x4e\xd2\x9c\x4e\x4e\xd2\x49\xa9\xa9\xe0\x49\xa9\xa9\xe0\xd8\x6c\x6c\xb4\xd8\x6c\x6c\xb4\xac\x56\x56\xfa\xac\x56\x56\xfa\xf3\xf4\xf4\x07\xf3\xf4\xf4\x07\xcf\xea\xea\x25\xcf\xea\xea\x25\xca\x65\x65\xaf\xca\x65\x65\xaf\xf4\x7a\x7a\x8e\xf4\x7a\x7a\x8e\x47\xae\xae\xe9\x47\xae\xae\xe9\x10\x08\x08\x18\x10\x08\x08\x18\x6f\xba\xba\xd5\x6f\xba\xba\xd5\xf0\x78\x78\x88\xf0\x78\x78\x88\x4a\x25\x25\x6f\x4a\x25\x25\x6f\x5c\x2e\x2e\x72\x5c\x2e\x2e\x72\x38\x1c\x1c\x24\x38\x1c\x1c\x24\x57\xa6\xa6\xf1\x57\xa6\xa6\xf1\x73\xb4\xb4\xc7\x73\xb4\xb4\xc7\x97\xc6\xc6\x51\x97\xc6\xc6\x51\xcb\xe8\xe8\x23\xcb\xe8\xe8\x23\xa1\xdd\xdd\x7c\xa1\xdd\xdd\x7c\xe8\x74\x74\x9c\xe8\x74\x74\x9c\x3e\x1f\x1f\x21\x3e\x1f\x1f\x21\x96\x4b\x4b\xdd\x96\x4b\x4b\xdd\x61\xbd\xbd\xdc\x61\xbd\xbd\xdc\x0d\x8b\x8b\x86\x0d\x8b\x8b\x86\x0f\x8a\x8a\x85\x0f\x8a\x8a\x85\xe0\x70\x70\x90\xe0\x70\x70\x90\x7c\x3e\x3e\x42\x7c\x3e\x3e\x42\x71\xb5\xb5\xc4\x71\xb5\xb5\xc4\xcc\x66\x66\xaa\xcc\x66\x66\xaa\x90\x48\x48\xd8\x90\x48\x48\xd8\x06\x03\x03\x05\x06\x03\x03\x05\xf7\xf6\xf6\x01\xf7\xf6\xf6\x01\x1c\x0e\x0e\x12\x1c\x0e\x0e\x12\xc2\x61\x61\xa3\xc2\x61\x61\xa3\x6a\x35\x35\x5f\x6a\x35\x35\x5f\xae\x57\x57\xf9\xae\x57\x57\xf9\x69\xb9\xb9\xd0\x69\xb9\xb9\xd0\x17\x86\x86\x91\x17\x86\x86\x91\x99\xc1\xc1\x58\x99\xc1\xc1\x58\x3a\x1d\x1d\x27\x3a\x1d\x1d\x27\x27\x9e\x9e\xb9\x27\x9e\x9e\xb9\xd9\xe1\xe1\x38\xd9\xe1\xe1\x38\xeb\xf8\xf8\x13\xeb\xf8\xf8\x13\x2b\x98\x98\xb3\x2b\x98\x98\xb3\x22\x11\x11\x33\x22\x11\x11\x33\xd2\x69\x69\xbb\xd2\x69\x69\xbb\xa9\xd9\xd9\x70\xa9\xd9\xd9\x70\x07\x8e\x8e\x89\x07\x8e\x8e\x89\x33\x94\x94\xa7\x33\x94\x94\xa7\x2d\x9b\x9b\xb6\x2d\x9b\x9b\xb6\x3c\x1e\x1e\x22\x3c\x1e\x1e\x22\x15\x87\x87\x92\x15\x87\x87\x92\xc9\xe9\xe9\x20\xc9\xe9\xe9\x20\x87\xce\xce\x49\x87\xce\xce\x49\xaa\x55\x55\xff\xaa\x55\x55\xff\x50\x28\x28\x78\x50\x28\x28\x78\xa5\xdf\xdf\x7a\xa5\xdf\xdf\x7a\x03\x8c\x8c\x8f\x03\x8c\x8c\x8f\x59\xa1\xa1\xf8\x59\xa1\xa1\xf8\x09\x89\x89\x80\x09\x89\x89\x80\x1a\x0d\x0d\x17\x1a\x0d\x0d\x17\x65\xbf\xbf\xda\x65\xbf\xbf\xda\xd7\xe6\xe6\x31\xd7\xe6\xe6\x31\x84\x42\x42\xc6\x84\x42\x42\xc6\xd0\x68\x68\xb8\xd0\x68\x68\xb8\x82\x41\x41\xc3\x82\x41\x41\xc3\x29\x99\x99\xb0\x29\x99\x99\xb0\x5a\x2d\x2d\x77\x5a\x2d\x2d\x77\x1e\x0f\x0f\x11\x1e\x0f\x0f\x11\x7b\xb0\xb0\xcb\x7b\xb0\xb0\xcb\xa8\x54\x54\xfc\xa8\x54\x54\xfc\x6d\xbb\xbb\xd6\x6d\xbb\xbb\xd6\x2c\x16\x16\x3a\x2c\x16\x16\x3a", // poly1305aes-20050218 aes athlon constant (https://cr.yp.to/mac.html).
                                      r"(?-u)\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb\x8d\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f\x5e\xbc\x63\xc6\x97\x35\x6a\xd4\xb3\x7d\xfa\xef\xc5\x91\x39\x72\xe4\xd3\xbd\x61\xc2\x9f\x25\x4a\x94\x33\x66\xcc\x83\x1d\x3a\x74\xe8\xcb", // RCOM https://github.com/johanstenberg92/AES/blob/master/src/org/johanstenberg/aes/Constants.java
                                      r"(?-u)\x00\xff\xc8\x08\x91\x10\xd0\x36\x5a\x3e\xd8\x43\x99\x77\xfe\x18\x23\x20\x07\x70\xa1\x6c\x0c\x7f\x62\x8b\x40\x46\xc7\x4b\xe0\x0e\xeb\x16\xe8\xad\xcf\xcd\x39\x53\x6a\x27\x35\x93\xd4\x4e\x48\xc3\x2b\x79\x54\x28\x09\x78\x0f\x21\x90\x87\x14\x2a\xa9\x9c\xd6\x74\xb4\x7c\xde\xed\xb1\x86\x76\xa4\x98\xe2\x96\x8f\x02\x32\x1c\xc1\x33\xee\xef\x81\xfd\x30\x5c\x13\x9d\x29\x17\xc4\x11\x44\x8c\x80\xf3\x73\x42\x1e\x1d\xb5\xf0\x12\xd1\x5b\x41\xa2\xd7\x2c\xe9\xd5\x59\xcb\x50\xa8\xdc\xfc\xf2\x56\x72\xa6\x65\x2f\x9f\x9b\x3d\xba\x7d\xc2\x45\x82\xa7\x57\xb6\xa3\x7a\x75\x4f\xae\x3f\x37\x6d\x47\x61\xbe\xab\xd3\x5f\xb0\x58\xaf\xca\x5e\xfa\x85\xe4\x4d\x8a\x05\xfb\x60\xb7\x7b\xb8\x26\x4a\x67\xc6\x1a\xf8\x69\x25\xb3\xdb\xbd\x66\xdd\xf1\xd2\xdf\x03\x8d\x34\xd9\x92\x0d\x63\x55\xaa\x49\xec\xbc\x95\x3c\x84\x0b\xf5\xe6\xe7\xe5\xac\x7e\x6e\xb9\xf9\xda\x8e\x9a\xc9\x24\xe1\x0a\x15\x6b\x3a\xa0\x51\xf4\xea\xb2\x97\x9e\x5d\x22\x88\x94\xce\x19\x01\x71\x4c\xa5\xe3\xc5\x31\xbb\xcc\x1f\x2d\x3b\x52\x6f\xf6\x2e\x89\xf7\xc0\x68\x1b\x64\x04\x06\xbf\x83\x38", // ltable https://github.com/johanstenberg92/AES/blob/master/src/org/johanstenberg/aes/Constants.java
                                    r"(?-u)\x01\xe5\x4c\xb5\xfb\x9f\xfc\x12\x03\x34\xd4\xc4\x16\xba\x1f\x36\x05\x5c\x67\x57\x3a\xd5\x21\x5a\x0f\xe4\xa9\xf9\x4e\x64\x63\xee\x11\x37\xe0\x10\xd2\xac\xa5\x29\x33\x59\x3b\x30\x6d\xef\xf4\x7b\x55\xeb\x4d\x50\xb7\x2a\x07\x8d\xff\x26\xd7\xf0\xc2\x7e\x09\x8c\x1a\x6a\x62\x0b\x5d\x82\x1b\x8f\x2e\xbe\xa6\x1d\xe7\x9d\x2d\x8a\x72\xd9\xf1\x27\x32\xbc\x77\x85\x96\x70\x08\x69\x56\xdf\x99\x94\xa1\x90\x18\xbb\xfa\x7a\xb0\xa7\xf8\xab\x28\xd6\x15\x8e\xcb\xf2\x13\xe6\x78\x61\x3f\x89\x46\x0d\x35\x31\x88\xa3\x41\x80\xca\x17\x5f\x53\x83\xfe\xc3\x9b\x45\x39\xe1\xf5\x9e\x19\x5e\xb6\xcf\x4b\x38\x04\xb9\x2b\xe2\xc1\x4a\xdd\x48\x0c\xd0\x7d\x3d\x58\xde\x7c\xd8\x14\x6b\x87\x47\xe8\x79\x84\x73\x3c\xbd\x92\xc9\x23\x8b\x97\x95\x44\xdc\xad\x40\x65\x86\xa2\xa4\xcc\x7f\xec\xc0\xaf\x91\xfd\xf7\x4f\x81\x2f\x5b\xea\xa8\x1c\x02\xd1\x98\x71\xed\x25\xe3\x24\x06\x68\xb3\x93\x2c\x6f\x3e\x6c\x0a\xb8\xce\xae\x74\xb1\x42\xb4\x1e\xd3\x49\xe9\x9c\xc8\xc6\xc7\x22\x6e\xdb\x20\xbf\x43\x51\x52\x66\xb2\x76\x60\xda\xc5\xf3\xf6\xaa\xcd\x9a\xa0\x75\x54\x0e\x01", // atable https://github.com/johanstenberg92/AES/blob/master/src/org/johanstenberg/aes/Constants.java
                                    r"(?-u)\x01\x02\x04\x08\x10\x20\x40\x80\x1b\x36\x6c\xd8\xab\x4d\x9a\x2f", // powx https://golang.org/src/crypto/aes/const.go
                                    r"(?-u)\x52\x09\x6a\xd5\x30\x36\xa5\x38\xbf\x40\xa3\x9e\x81\xf3\xd7\xfb\x7c\xe3\x39\x82\x9b\x2f\xff\x87\x34\x8e\x43\x44\xc4\xde\xe9\xcb\x54\x7b\x94\x32\xa6\xc2\x23\x3d\xee\x4c\x95\x0b\x42\xfa\xc3\x4e\x08\x2e\xa1\x66\x28\xd9\x24\xb2\x76\x5b\xa2\x49\x6d\x8b\xd1\x25\x72\xf8\xf6\x64\x86\x68\x98\x16\xd4\xa4\x5c\xcc\x5d\x65\xb6\x92\x6c\x70\x48\x50\xfd\xed\xb9\xda\x5e\x15\x46\x57\xa7\x8d\x9d\x84\x90\xd8\xab\x00\x8c\xbc\xd3\x0a\xf7\xe4\x58\x05\xb8\xb3\x45\x06\xd0\x2c\x1e\x8f\xca\x3f\x0f\x02\xc1\xaf\xbd\x03\x01\x13\x8a\x6b\x3a\x91\x11\x41\x4f\x67\xdc\xea\x97\xf2\xcf\xce\xf0\xb4\xe6\x73\x96\xac\x74\x22\xe7\xad\x35\x85\xe2\xf9\x37\xe8\x1c\x75\xdf\x6e\x47\xf1\x1a\x71\x1d\x29\xc5\x89\x6f\xb7\x62\x0e\xaa\x18\xbe\x1b\xfc\x56\x3e\x4b\xc6\xd2\x79\x20\x9a\xdb\xc0\xfe\x78\xcd\x5a\xf4\x1f\xdd\xa8\x33\x88\x07\xc7\x31\xb1\x12\x10\x59\x27\x80\xec\x5f\x60\x51\x7f\xa9\x19\xb5\x4a\x0d\x2d\xe5\x7a\x9f\x93\xc9\x9c\xef\xa0\xe0\x3b\x4d\xae\x2a\xf5\xb0\xc8\xeb\xbb\x3c\x83\x53\x99\x61\x17\x2b\x04\x7e\xba\x77\xd6\x26\xe1\x69\x14\x63\x55\x21\x0c\x7d", // sbox1 (already have sbox0 in first entry) https://golang.org/src/crypto/aes/const.go

];
